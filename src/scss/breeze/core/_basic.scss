/**********************************************************************
Description: This file define the basic and common styling used by Breeze CSS Framework.

Dependencies: variables, mixins

Details: It defines the basic styles as listed below.

Box border - It's applied to html and all elements in order to calculate width including border and padding.

Screen - The default classes having screen sizes using variables defined in variable file.

Floats - The floating classes either clear the float, no float or add left/right float.

Width & Height - This section define width and height classes having predefined values in percentage.

Avatar - The image or icons used as avatar.

Alignments - The alignment classes allows to align either the element itself or it's children.

Positioning - This section define the positioning classes.

Layers - Layered blocks having z-index. The greater the layer number, the more is z-index.

Display - The display classes control the display property i.e. inline, block or inline block.

Visibility - These classes control the display property i.e. block or none. The visibility property specific
classes can be used to show or hide an element keeping it's space on screen.

Cursor - The cursor classes.

Disabled - It disable an element by changing color to gray and cursor to default.

Fluid - The fluid class makes children occupying 100% width with auto height. Useful for responsive images.

Message - These classes can be used to show message according to failure, warning or success.
***********************************************************************/

/**
 * Make all box elements to follow border-box. It gives flexibility to use css width as the element width including
 * border and padding. The remaining space deducting border and padding from given width will be used by element content.
 */

html {
  -webkit-box-sizing: border-box;
	 -moz-box-sizing: border-box;
		  box-sizing: border-box;
}

*, *:before, *:after {
  -webkit-box-sizing: inherit;
	 -moz-box-sizing: inherit;
		  box-sizing: inherit;
}

// The primary color will be used as default color for document body and text.

html, body {
	background-color: $color-primary;
	color: $color-primary-text;
}

/**
 * Screen Resolutions - The large number of device resolutions and to serve content decorated specific to these devices is
 * a tedius task without going responsive. CMGTools have used the most commonly used standard resolutions to cover maximum screens.
 */

.screen {

	&.screen-mobile-small {
		width: $screen-mobile-small;
	}

	&.screen-mobile-large {
		width: $screen-mobile-large;
	}

	&.screen-tablet-small {
		width: $screen-tablet-small;
	}

	&.screen-tablet-large {
		width: $screen-tablet-large;
	}

	&.screen-desktop-small {
		width: $screen-desktop-small;
	}

	&.screen-desktop-medium {
		width: $screen-desktop-medium;
	}

	&.screen-desktop-large {
		width: $screen-desktop-large;
	}

	&.screen-desktop-xlarge {
		width: $screen-desktop-xlarge;
	}

	&.screen-desktop-xxlarge {
		width: $screen-desktop-xxlarge;
	}

	&.screen-desktop-xxxlarge {
		width: $screen-desktop-xxxlarge;
	}
}

/**
 * Floating Blocks - These classes can be used to clear or float the elements.
 */

.clear {
	clear: both !important;
}

.left {
	float: left !important;
}

.right {
	float: right !important;
}

.clear-none {
	clear: none !important;
}

.float-none {
	float: none !important;
}

.float-none-center {
	float: none !important;
	margin: 0 auto;
}

/**
 * Pre-defined width and height, handy at few places.
 */

// Width

.width {
	width: 100%;

	&.width-auto {
		width: auto !important;
	}

	&.width-1 {
		width: 1% !important;
	}

	&.width-5 {
		width: 5% !important;
	}

	&.width-10 {
		width: 10% !important;
	}

	&.width-20 {
		width: 20% !important;
	}

	&.width-25 {
		width: 25% !important;
	}

	&.width-40 {
		width: 40% !important;
	}

	&.width-48 {
		width: 48% !important;
	}

	&.width-50 {
		width: 50% !important;
	}

	&.width-75 {
		width: 75% !important;
	}

	&.width-80 {
		width: 80% !important;
	}

	&.width-90 {
		width: 90% !important;
	}

	&.width-100 {
		width: 100% !important;
	}

	&.width-default {
		width: 64px !important;
	}

	&.width-small {
		width: 128px !important;
	}

	&.width-medium {
		width: 256px !important;
	}

	&.width-large {
		width: 512px !important;
	}
}

// Height

.height {
	height: 100%;

	&.height-auto {
		height: auto !important;
	}

	&.height-1 {
		height: 1% !important;
	}

	&.height-10 {
		height: 10% !important;
	}

	&.height-20 {
		height: 20% !important;
	}

	&.height-25 {
		height: 25% !important;
	}

	&.height-50 {
		height: 50% !important;
	}

	&.height-75 {
		height: 75% !important;
	}

	&.height-80 {
		height: 80% !important;
	}

	&.height-90 {
		height: 90% !important;
	}

	&.height-100 {
		height: 100% !important;
	}

	&.height-default {
		height: 64px !important;
	}

	&.height-small {
		height: 128px !important;
	}

	&.height-medium {
		height: 256px !important;
	}

	&.height-large {
		height: 512px !important;
	}
}

/**
 * Avatar and Icon width
 */

.avatar {
	display: inline-block;
	width: 32px;

	img {
		width: 32px;
	}

	&.avatar-center {
		margin: 0 auto;
	}

	&.avatar-small {
		width: 48px;

		img {
			width: 48px;
		}
	}

	&.avatar-medium {
		width: 64px;

		img {
			width: 64px;
		}
	}

	&.avatar-large {
		width: 100px;

		img {
			width: 100px;
		}
	}
}

.icon {
	display: inline-block;

	&.icon-center {
		margin: 0 auto;
	}

	&.icon-default {
		width: 32px;
	}

	&.icon-small {
		width: 48px;
	}

	&.icon-medium {
		width: 64px;
	}

	&.icon-large {
		width: 100px;
	}
}

/**
 * Alignments for centered box and text.
 */

// Horizontally center align the element
.center {
	margin: 0 auto !important;
}

// Align the children of an element - left, horizontally center and right
.align {
	text-align: left !important;

	&.align-center {
		text-align: center !important;
	}

	&.align-right {
		text-align: right !important;
	}
}

.valign {
	vertical-align: baseline;

	&.valign-initial {
		vertical-align: initial;
	}

	&.valign-inherit {
		vertical-align: inherit;
	}

	&.valign-top {
		vertical-align: top;
	}

	&.valign-middle {
		vertical-align: middle;
	}

	&.valign-bottom {
		vertical-align: bottom;
	}

	&.valign-text-top {
		vertical-align: text-top;
	}

	&.valign-text-bottom {
		vertical-align: text-bottom;
	}

	&.valign-sub {
		vertical-align: sub;
	}

	&.valign-super {
		vertical-align: super;
	}
}

// Positioning

.absolute {
	position: absolute !important;

	// Horizontally center
	&.absolute-center {
		left: 0;
		right: 0;
		margin-left: auto;
		margin-right: auto;
	}

	// Vertically center - both parent and child needs fixed width and height
	&.absolute-middle {
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		margin-left: auto;
		margin-right: auto;
	}

	&.absolute-top {
		top: 0px;
	}

	&.absolute-left {
		left: 0px;
	}

	&.absolute-bottom {
		bottom: 0px;
	}

	&.absolute-right {
		right: 0px;
	}

	&.absolute-top-left {
		top: 0px;
		left: 0px;
	}

	// Horizontally center at top - child needs fixed width smaller than parent
	&.absolute-top-center {
		top: 0px;
		left: 0px;
		right: 0px;
	}

	&.absolute-top-right {
		top: 0px;
		right: 0px;
	}

	&.absolute-bottom-left {
		bottom: 0px;
		left: 0px;
	}

	// Horizontally center at bottom - child needs fixed width smaller than parent
	&.absolute-bottom-center {
		bottom: 0px;
		left: 0px;
		right: 0px;
	}

	&.absolute-bottom-right {
		bottom: 0px;
		right: 0px;
	}
}

.relative {
	position: relative !important;
}

.fixed {
	position: fixed !important;
}

// Stacked
.layer {
	z-index: 1;

	&.layer-1 {
		z-index: 10;
	}

	&.layer-2 {
		z-index: 20;
	}

	&.layer-3 {
		z-index: 30;
	}

	&.layer-4 {
		z-index: 40;
	}

	&.layer-5 {
		z-index: 50;
	}

	&.layer-6 {
		z-index: 60;
	}

	&.layer-7 {
		z-index: 70;
	}

	&.layer-8 {
		z-index: 80;
	}

	&.layer-9 {
		z-index: 90;
	}

	&.layer-10 {
		z-index: 100;
	}

	&.layer-11 {
		z-index: 110;
	}

	&.layer-12 {
		z-index: 120;
	}

	&.layer-13 {
		z-index: 130;
	}

	&.layer-14 {
		z-index: 140;
	}

	&.layer-15 {
		z-index: 150;
	}

	&.layer-16 {
		z-index: 160;
	}

	&.layer-17 {
		z-index: 170;
	}

	&.layer-18 {
		z-index: 180;
	}

	&.layer-19 {
		z-index: 190;
	}

	&.layer-20 {
		z-index: 200;
	}
}

// Display Type

// Disabled ... conflicting with the block element ...
// Use display-block instead of block to control display
.block {
	//display: block !important;
}

// Backward compatibility
.inline {
	display: inline !important;
}

// Backward compatibility
.inline-block {
	display: inline-block !important;
}

// Backward compatibility
.inline-table {
	display: inline-table !important;
}

// Visibility - Without own space

// Backward compatibility
.visible {
	display: block !important;
}

// Strictly hidden - Backward compatibility
.hidden {
	display: none !important;
}

.hidden-easy {
	display: none;
}

// New display controls

.display-block {
	display: block !important;
}

.display-inline {
	display: inline !important;
}

.display-inline-block {
	display: inline-block !important;
}

.display-inline-table {
	display: inline-table !important;
}

.display-visible {
	display: block !important;
}

// Strictly hidden
.display-hidden {
	display: none !important;
}

// Visibility - Hidden/Displayed occupying space on screen

.visible-space {
	visibility: visible !important;
}

.hidden-space {
	visibility: hidden !important;
}

// Cursors - Direct

.pointer, .cmt-click {
	cursor: pointer;
}

.pointer-none {
	pointer-events: none;
}

.pointer-auto {
	pointer-events: auto;
}

.crosshair {
	cursor: crosshair;
}

.help {
	cursor: help;
}

.wait {
	cursor: wait;
}

// Cursors - Standard

.cursor {
	cursor: default;

	&.cursor-pointer {
		cursor: pointer;
	}

	&.cursor-pointer-none {
		pointer-events: none;
	}

	&.cursor-pointer-auto {
		pointer-events: auto;
	}

	&.cursor-crosshair {
		cursor: crosshair;
	}

	&.cursor-help {
		cursor: help;
	}

	&.cursor-wait {
		cursor: wait;
	}
}

// Disabled
.disabled {
	background-color: $color-gray-l !important;
	color: $color-white !important;
	cursor: default !important;

	&:hover {
		background-color: $color-gray-l !important;
		color: $color-white !important;
	}
}

// Disabled - Moved out from form
/*
.disabled {
	background-color: $color-btn-d !important;
	color: $color-btn-text-d !important;

	&:hover {
		background-color: $color-btn-d !important;
		color: $color-btn-text-d !important;
	}
}
*/

// Fluid Elements (blocks, images)

.fluid {
	max-width: 100%;
	height: auto;
}

.fluid-both {
	max-width: 100%;
	max-height: 100%;
}

// Messages

.warning, .error, .success, .info, .help-block {
	font-size: $font-size-8;
	width: 100%;

	&.highlight {
		background-color: $color-secondary;
	}
}

.error {
	color: $color-error;
}

.warning {
	color: $color-warning;
}

.success {
	color: $color-success;
}

.info {
	color: $color-info;
}
